1. 建立对应数据库表结构的JavaBean――学生类：Student
注意，该类的建立是根据数据库表stu_info的数据表结构建立的。
public class Student {
	private int id; 
	private String name; 
	private String sex;
	private int age;
	private float weight;
	private float hight;
	//这里省略了get、set方法。
}
2、数据库连接与关闭释放资源工具JavaBean类的设计
package com.db;
import java.sql.*;
public class DbConnect {
	private static String driverName = "com.mysql.jdbc.Driver";   //驱动程序名
	private static String userName = "root";                    //数据库用户名
	private static String userPwd = "123456";                  //密码
	private static String dbName = "students";                 //数据库名
	public static Connection getDBconnection(){
		String  url1="jdbc:mysql://localhost/"+dbName;
		String  url2 ="?user="+userName+"&password="+userPwd;
		String  url3="&useUnicode=true&characterEncoding=GB2312";
		String  url =url1+url2+url3;
		try{
		    Class.forName(driverName);
		    Connection con=DriverManager.getConnection(url); 
		    return con; 
	    }catch (Exception e) {
			   e.printStackTrace();
		}
		return null;
    } 
    public static void closeDB(Connection con,PreparedStatement pstm, ResultSet rs){
 	   try{
 		   if(rs!=null) rs.close(); 
 		   if(pstm!=null) pstm.close();
		   if(con!=null) con.close();
	   }catch (SQLException e) {
			e.printStackTrace();
	   }
	}
}
3．建立实现数据库处理的接口： IStudentDAO
package com.dao;
import java.util.List;
import com.domain.Student;
public interface IStudentDAO {
	public abstract Student create(Student stu) throws Exception;//添加记录的方法
	public abstract void remove(Student stu) throws Exception; //删除记录的方法
	public abstract Student find(Student stu) throws Exception;  //查询记录的方法
	public abstract List<Student> findAll() throws Exception;  //列出全部记录的方法
	public abstract void update(Student stu) throws Exception;  //修改记录的方法
}
4．对接口IStudentDAO的实现，及其访问逻辑处理类StudentDAO类，包括连接数据库方法，一些有关的常量
package com.dao;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import com.db.DbConnect;
import com.domain.Student;
public class StudentDAO implements IStudentDAO {     
	protected static final String FIELDS_INSERT ="id,name,sex,age,weight,hight";
	protected static String INSERT_SQL="insert into stu_info ("
                                    +FIELDS_INSERT+")"+"values (?,?,?,?,?,?)";
	protected static String SELECT_SQL="select "
                                    +FIELDS_INSERT+" from stu_info where id=?";
	protected static String UPDATE_SQL="update stu_info set "
                              +"id=?,name=?,sex=?,age=?,weight=?,hight=? where id=?";
	protected static String DELETE_SQL ="delete from stu_info where id=?";
 //实现向数据库中添加记录的方法 
	public Student create(Student stu) throws Exception{
		 Connection con=null;
	      PreparedStatement prepStmt=null;
	      ResultSet rs=null;
	      try{
	    	  con=DbConnect.getDBconnection();
	    	  prepStmt =con.prepareStatement(INSERT_SQL); 
	    	  prepStmt.setInt(1,stu.getId());
	    	  prepStmt.setString(2,stu.getName());
	    	  prepStmt.setString(3,stu.getSex());
	    	  prepStmt.setInt(4,stu.getAge());
	    	  prepStmt.setFloat(5,stu.getWeight());
	    	  prepStmt.setFloat(6,stu.getHight()); 
	          prepStmt.executeUpdate();
	      } catch(Exception e){
	      } finally{
	    	     DbConnect.closeDB(con, prepStmt, rs);
	      }
	     return stu;
	}
//实现查询数据库中对指定的记录是否存在的方法
	public Student find(Student stu) throws Exception {
	    Connection con=null;
	    PreparedStatement prepStmt=null;
	    ResultSet rs=null;
	    Student stu2 = null;
	    try {
	       con=DbConnect.getDBconnection();
            prepStmt = con.prepareStatement(SELECT_SQL);
            prepStmt.setInt(1,stu.getId());
            rs = prepStmt.executeQuery();
            if (rs.next()){
            	stu2 = new Student();
                stu2.setId(rs.getInt(1)); 
                stu2.setName(rs.getString(2));
                stu.setSex(rs.getString(3));
                stu2.setAge(rs.getInt(4)); 
                stu2.setWeight(rs.getFloat(5));
                stu2.setHight(rs.getFloat(6)); 
           }
      } catch (Exception e) {
          // handle exception
      } finally {
    	     DbConnect.closeDB(con, prepStmt, rs);
      }
     return stu2;
	}
   //实现列出数据库全部记录的方法 
	public List<Student> findAll() throws Exception {
		Connection con=null;
	    PreparedStatement prepStmt=null;
	    ResultSet rs=null;	
	    List<Student> student = new ArrayList<Student>();
	    con=DbConnect.getDBconnection();
	    prepStmt = con.prepareStatement("select * from stu_info");
        rs = prepStmt.executeQuery();
        while(rs.next()) {
        	Student stu2 = new Student();
            stu2.setId(rs.getInt(1)); 
            stu2.setName(rs.getString(2));
            stu2.setSex(rs.getString(3));
            stu2.setAge(rs.getInt(4)); 
            stu2.setWeight(rs.getFloat(5));
            stu2.setHight(rs.getFloat(6)); 
            student.add(stu2);
        }
        DbConnect.closeDB(con, prepStmt, rs); 
        return student;
	}
//实现删除数据库中指定的记录方法 
	public void remove(Student stu) throws Exception {
		Connection con=null;
	    PreparedStatement prepStmt=null;
	    ResultSet rs=null;
	    try {
	    	con=DbConnect.getDBconnection();
	    	prepStmt = con.prepareStatement(DELETE_SQL);
	        prepStmt.setInt(1,stu.getId());
	        prepStmt.executeUpdate();
	    }catch(Exception e) {
	          //
	    } finally{
	    	 DbConnect.closeDB(con, prepStmt, rs);
	    }
	}
//实现用指定的对象修改数据库中记录的方法 
	public void update(Student stu) throws Exception {
		Connection con=null;
	    PreparedStatement prepStmt=null;
	    ResultSet rs=null;
	    try {
	    	con=DbConnect.getDBconnection();
         prepStmt = con.prepareStatement(UPDATE_SQL);
         prepStmt.setInt(1,stu.getId());
	    	prepStmt.setString(2,stu.getName());
	    	prepStmt.setString(3,stu.getSex());
	    	prepStmt.setInt(4,stu.getAge());
	    	prepStmt.setFloat(5,stu.getWeight());
	    	prepStmt.setFloat(6,stu.getHight());
	    	prepStmt.setInt(7,stu.getId());
	    	int rowCount=prepStmt.executeUpdate();
            if (rowCount == 0) {
                   throw new Exception("Update Error:Student Id:" + stu.getId());
            }
        } catch (Exception e) {
                // handle exception
        } finally {
        	 DbConnect.closeDB(con, prepStmt, rs);
        }
    }
}
