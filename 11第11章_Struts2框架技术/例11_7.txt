【实现过程】
（1）建立工程：ch11_7_Interceptor，并在web.xml中配置核心控制器。
（2）根据图11-6所示页面，设计评论页面（news.jsp），其代码如下：
<%@ page language="java" pageEncoding="UTF-8"%>
<%@taglib prefix="s" uri="/struts-tags"%>
<html>
    <head> <title>评论</title> </head>
    <body>
        请发表你的评论！<hr>
	   <s:form action="public" method="post">
              <s:textfield name="title" label="评论标题" maxLength="36"/>
              <s:textarea name="content" cols="36" rows="6" label="评论内容"/>
              <s:submit value="提交"/>
	</s:form>
    </body>
</html>
（3）编写评论成功页面（success.jsp）
<%@ page contentType="text/html; charset=UTF-8" %
<%@ taglib prefix="s" uri="/struts-tags" %>
<html>
    <head> <title>评论成功</title> </head>
    <body>
        评论如下：<hr>
        评论标题：<s:property value="title"/> <br>
        评论内容：<s:property value="content"/>
  </body>
</html>
（4）评论页面对应的业务控制器（PublicAction.java）
package interceptor;
import com.opensymphony.xwork2.ActionSupport;
public class PublicAction extends ActionSupport{	
	private String title;
	private String content;
	//属性的getter、setter方法
	public String execute(){
		return SUCCESS;
	}
}
（5）编写自定义拦截器：MyInterceptor.java
编写一个自定义拦截器用于对发表评论的内容进行过滤，代码如下：
package interceptor;
import java.util.Map;
import org.apache.struts2.ServletActionContext;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;
public class MyInterceptor extends AbstractInterceptor {
	public String intercept(ActionInvocation ai) throws Exception {
	   //获取页面提交的所有属性及其属性值
	   Map<String, Object> parameters = ai.getInvocationContext().getParameters();
	   //对每对属性、属性值分别进行过滤，将过滤后的内容再保存到该属性中
	   for (String key : parameters.keySet()) {
	      Object value = parameters.get(key);
	      if ( value != null && value instanceof String[]) {
	         String[] valueArray = (String[]) value;
	         for (int i = 0; i < valueArray.length; i++) {
	            if( valueArray[i] != null ){
	               //判断用户提交的评论内容是否有要过滤的内容
	                if(valueArray[i].contains("讨厌")) { 
	                   //以“喜欢”代替要过滤的内容“讨厌”
	                   valueArray[i] =valueArray[i].replaceAll("讨厌", "喜欢");
	                   //把替代后的评论内容设置为Action的评论内容
	                   parameters.put(key, valueArray);
	                 }
	              }
	           }
	        }
	     }
	   return ai.invoke();//进行执行下一个拦截器或Action
	}
}
（6）在struts.xml中配置自定义拦截器和Action
修改配置文件struts.xml，在配置文件中配置拦截器和Action，
<struts>
    <constant name="struts.custom.i18n.resources" value="globalMessages"/>
    <constant name="struts.i18n.encoding" value="UTF-8" /> 
    <package name="I18N" extends="struts-default">
        <interceptors>
             <!--文字过滤拦截器配置，replace 是拦截器的名字--> 
            <interceptor name="replace" class="interceptor.MyInterceptor" /> 
        </interceptors>
	 <action name="public" class="interceptor.PublicAction"><!--文字过滤Action配置-->
            <result name="success">/success.jsp</result> 
            <result name="login">/success.jsp</result> 
             <interceptor-ref name="replace"/>  <!--使用自定义拦截器-->
             <interceptor-ref name="defaultStack" />  <!--Struts2系统默认拦截器-->
        </action>
     </package>
</struts> 
（7）项目部署和运行。部署后，其运行效果如图11-6所示的页面。
